#version 330 core

in vec3 inPos;	
in vec3 inColor;
in vec3 inNormal;

uniform mat4 modelViewProj;
uniform mat4 modelView;
uniform mat4 normal;

out vec3 color;

//Variables de la fuente de luz
vec3 Ia = vec3(0.1);
vec3 Il = vec3(1.0);
vec3 Pl = vec3(0);


//Propiedades del objeto
vec3 Ka = vec3(1,0,0);
vec3 Kd = vec3(1,0,0);
vec3 Ks = vec3(1);
float n = 10;
vec3 N;
vec3 Pp;

//En vectores, normalizamos con 1, en vectores con 0

vec3 shade()
{
	vec3 c=vec3(0.0);

	c+=Ia*Ka;

	N=normalize(N);
	vec3 L = normalize(Pl-Pp);
	float factor_difuso = dot(N,L);
	c+= clamp (Il*Kd*factor_difuso,0,1);

	vec3 R = normalize(reflect(-L,N));
	vec3 V = normalize(vec3(0)-Pp);
	float factor_especular = dot (R,V);
	factor_especular = pow(max(factor_especular,0),n);
	c+=clamp(Il*Ks*factor_especular,0,1);

	return c;
	
}

void main()
{

	//Ka = inColor;
	N = (normal*vec4(inNormal, 0.0)).xyz;
	Pp = (modelView*vec4(inPos,1.0)).xyz;

	color = shade();

	gl_Position =  modelViewProj * vec4 (inPos,1.0);
}
